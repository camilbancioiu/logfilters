#!/usr/bin/python

import sys
from typing import List, Optional

from blocks import Block
from blocks import BlockWithInstanceCounting
from blocks import BlockWithInstanceStats
from blocks import BlockWithNodeStats

SCCalls = \
    BlockWithInstanceCounting(
        'contract call',
        'RunSmartContractCall begin',
        'RunSmartContractCall end instances')

SCCallInstanceStats = \
    BlockWithInstanceStats(
        'contract call',
        'RunSmartContractCall begin',
        'RunSmartContractCall end instances')

NodeStats = BlockWithNodeStats()


def main():
    try:
        config_type = sys.argv[1]
    except IndexError:
        config_type = 'c'

    blocks = make_block_config_by_type(config_type)
    filtered = apply_filter(blocks, sys.stdin)
    for line in filtered:
        if line is not None:
            print(line, end='')


def make_block_config_by_type(t: str) -> List[Block]:
    if t == 'c':
        return [SCCalls]
    if t == 'i':
        return [SCCallInstanceStats]
    if t == 'n':
        return [NodeStats]
    return list()


def feed_line_to_blocks(blocks: list[Block], line: str) -> Optional[str]:
    filtered_line: Optional[str] = line
    for block in blocks:
        if filtered_line is None:
            return None
        filtered_line = block.filter(filtered_line)
    return filtered_line


def apply_filter(blocks, infile):
    for line in infile:
        filtered_line = feed_line_to_blocks(blocks, line)
        if line is not None:
            yield filtered_line


if __name__ == '__main__':
    main()

# vim: ft=python
